{"version":3,"sources":["components/DataTable/TableHeader.js","components/DataTable/TableRow.js","components/DataTable/LoadingTableRow.js","components/DataTable/TableBody.js","components/DataTable/DataTable.js","components/DataTable/index.js","components/App.js","index.js"],"names":["TableHeader","columns","SelectCell","selectCell","className","role","map","column","styles","width","flexBasis","length","toFixed","key","style","label","TableRow","row","rowKey","reactWindowStyleObj","onRowClick","rowIndex","setSizeForWindowing","hasComputedSize","rowRef","useRef","rowId","tableCells","value","numeric","__columnMeta__","useEffect","height","current","getBoundingClientRect","ref","classNames","Boolean","onClick","tabIndex","data","LoadingTableRow","PAGE_STATUS","TableBody","rows","infiniteLoading","totalRowCount","loadMoreData","pageSize","useState","sizeMap","setSizeMap","listRef","pagesMap","pageLoading","queue","setQueue","i","Object","values","some","pg","pageNo","slice","useCallback","index","size","resetAfterIndex","pushToQueue","prevQueue","includes","renderVirtualizedList","onItemsRendered","infiniteLoadingProps","itemCount","itemSize","idx","overscanCount","isItemLoaded","loadMoreItems","startIndex","endIndex","endIndexPage","Math","floor","pNo","el","defaultProps","WIDTH_PX_REGEX","DataTable","selectable","selectedKeys","onSelectionChange","allSelected","_onSelectionChange","sel","hasPixelWidthValues","useMemo","test","trim","getSelectCell","header","checked","type","aria-checked","aria-label","ev","stopPropagation","onChange","target","filter","HeaderSelectCell","fetchData","albumId","a","window","fetch","then","res","json","App","setSelectedKeys","photos","setPhotos","tableColumns","tableRows","photo","thumbnail","alt","src","thumbnailUrl","url","href","rel","loadData","prev","selection","rowData","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UA0CeA,EAvCK,SAAC,GAAD,IAClBC,EADkB,EAClBA,QACYC,EAFM,EAElBC,WAFkB,OAIlB,yBAAKC,UAAU,YAAYC,KAAK,YAC9B,yBAAKD,UAAU,uBAAuBC,KAAK,OACzC,kBAACH,EAAD,MAEID,EAAQK,KAAI,SAACC,GACX,IAAMC,EAAS,GAEf,GAAID,EAAOE,MACTD,EAAOC,MAAQF,EAAOE,UACjB,CACL,IAAMC,EAAa,IAAMT,EAAQU,OACjCH,EAAOE,UAAP,UAAsBA,EAAUE,QAAQ,GAAxC,KAGF,OACE,yBACEC,IAAKN,EAAOM,IACZT,UAAU,yBACVC,KAAK,eACLS,MAAK,eAAON,IAEXD,EAAOQ,a,uBCyETC,EAjGE,SAAC,GAUX,IATLC,EASI,EATJA,IACAhB,EAQI,EARJA,QACAiB,EAOI,EAPJA,OACYhB,EAMR,EANJC,WACAgB,EAKI,EALJA,oBACAC,EAII,EAJJA,WACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,oBACAC,EACI,EADJA,gBAEMC,EAASC,mBAETC,EAAQT,EAAIC,GAEZS,EAAa1B,EAAQK,KAAI,SAACC,GAAD,MAAa,CAC1CqB,MAAOX,EAAIV,EAAOM,KAClBA,IAAI,GAAD,OAAKN,EAAOM,IAAZ,YAAmBa,GACtBjB,MAAOF,EAAOE,OAAS,KACvBoB,QAAStB,EAAOsB,QAChBC,eAAgBvB,MAWlB,OARAwB,qBAAU,WACR,IAAKR,EAAiB,KAEZS,EAAWR,EAAOS,QAAQC,wBAA1BF,OACRV,EAAoBD,EAAUW,MAE/B,CAACT,EAAiBD,EAAqBD,IAGxC,yBAAKP,MAAOK,EAAqBd,KAAK,QAOpC,yBACE8B,IAAKX,EACLpB,UAAWgC,IAAW,CACpB,UAAU,EACV,oBAAqBC,QAAQjB,KAE/BkB,QAAS,WACPlB,EAAWH,EAAKI,IAElBhB,KAAK,MACLkC,SAAU,GAEV,kBAACrC,EAAD,CAAYwB,MAAOA,IAEjBC,EAAWrB,KAAI,SAACkC,GACd,IAAMhC,EAAS,GAEf,GAAIgC,EAAK/B,MACPD,EAAOC,MAAQ+B,EAAK/B,UACf,CACL,IAAMC,EAAa,IAAMT,EAAQU,OACjCH,EAAOE,UAAP,UAAsBA,EAAUE,QAAQ,GAAxC,KAGF,OACE,yBACEC,IAAK2B,EAAK3B,IACVT,UAAWgC,IAAW,CACpB,WAAW,EACX,mBAAoBI,EAAKX,UAE3BxB,KAAK,OACLS,MAAK,eAAON,IAEXgC,EAAKZ,aCtDPa,EApBS,SAAC,GAAD,IACtBtB,EADsB,EACtBA,oBADsB,OAGtB,yBAAKL,MAAOK,GACV,yBACEf,UAAU,yBACVC,KAAK,OAEL,0BAAMD,UAAU,oBAChB,0BAAMA,UAAU,oBAChB,0BAAMA,UAAU,uBCAhBsC,EACK,UADLA,EAEI,SAGJC,EAAY,SAAC,GAWZ,IAVLC,EAUI,EAVJA,KACA3C,EASI,EATJA,QACAiB,EAQI,EARJA,OACAf,EAOI,EAPJA,WACAiB,EAMI,EANJA,WACAyB,EAKI,EALJA,gBACAC,EAII,EAJJA,cACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,SACAhB,EACI,EADJA,OACI,EAC0BiB,mBAAS,IADnC,mBACGC,EADH,KACYC,EADZ,KAGEC,EAAU3B,mBACV4B,EAAW5B,iBAAO,IAClB6B,EAAc7B,kBAAO,GALvB,EAOsBwB,mBAAS,IAP/B,mBAOGM,EAPH,KAOUC,EAPV,KAUJzB,qBAAU,WACR,GAAIc,EAAiB,CACnB,IAAK,IAAIY,EAAI,EAAGA,EAAKb,EAAKjC,OAASqC,EAAWS,GAAK,EACjDJ,EAASpB,QAAQwB,EAAI,GAAKf,EAQ5B,GANAY,EAAYrB,QAAUyB,OAAOC,OAAON,EAASpB,SAAS2B,MACpD,SAACC,GAAD,OAAQA,IAAOnB,MAKZY,EAAYrB,SAA4B,IAAjBsB,EAAM5C,OAAc,CAC9C,IAAMmD,EAASP,EAAMQ,MAAM,EAAG,GAC9BP,EAASD,EAAMQ,MAAM,IAErBV,EAASpB,QAAQ6B,GAAUpB,EAC3BY,EAAYrB,SAAU,EAEtBc,EAAae,OAGhB,CAAClB,EAAMI,EAAUO,EAAOR,EAAcF,IAEzC,IAAMvB,EAAsB0C,uBAAY,SAACC,EAAOC,GAC9Cf,EAAW,eACND,EADK,eAEPe,EAAQC,KAEPd,GAAWA,EAAQnB,SACrBmB,EAAQnB,QAAQkC,gBAAgBF,GAAO,KAExC,CAACf,EAASC,IAIPiB,EAAc,SAACN,GACdT,EAASpB,QAAQ6B,IACpBN,GACE,SAACa,GAAD,OAAgBA,EAAUC,SAASR,GAC/BO,EADY,sBAEPA,GAFO,CAEIP,QAepBS,EAAwB,WAKlB,IAAD,yDAAP,GAHFpC,EAGS,EAHTA,IAEAqC,EACS,EADTA,gBAEMC,EAAuB,GAK7B,OAJI5B,IACF4B,EAAqBD,gBAAkBA,GAIvC,kBAAC,IAAD,eACErC,IAAKA,EACLH,OAAQA,EACR0C,UAAW5B,EACX6B,SAAU,SAACC,GAAD,OAAS1B,EAAQ0B,IAAQ,IACnCnE,MAAM,OACNoE,cAAe,GAEXJ,IAEH,YAAuB,IAApBR,EAAmB,EAAnBA,MAAOnD,EAAY,EAAZA,MAET,GAAImD,GAASrB,EAAKjC,OAChB,OACE,kBAAC,EAAD,CACEQ,oBAAqBL,IAK3B,IAAMG,EAAM2B,EAAKqB,GACjB,OACE,kBAAC,EAAD,CACEhD,IAAKA,EACLhB,QAASA,EACTiB,OAAQA,EACRf,WAAYA,EACZiB,WAAYA,EACZC,SAAU4C,EACV9C,oBAAqBL,EACrBQ,oBAAqBA,EACrBC,gBAAiBc,QAAQa,EAAQe,UAQ7C,OAAKpB,EAOH,kBAAC,IAAD,CACEiC,aAjFiB,SAACb,GAAD,OAAWA,EAAQrB,EAAKjC,QAkFzC+D,UAAW5B,EACXiC,cAvEkB,SAACC,EAAYC,GAKjC,IAJA,IAAMC,EAAeC,KAAKC,MAAMH,EAAWjC,GAAY,EAI9CqC,EAAM,EAAGA,GAAOH,EAAcG,GAAO,EAC5CjB,EAAYiB,MAmEX,gBAAGb,EAAH,EAAGA,gBAAiBrC,EAApB,EAAoBA,IAApB,OAA8BoC,EAAsB,CACnDpC,IAAK,SAACmD,GACJlC,EAAQnB,QAAUqD,EAClBnD,EAAImD,IAENd,uBAhBGD,EAAsB,CAC3BpC,IAAKiB,KAkCXT,EAAU4C,aAAe,CACvBxC,aAAc,aACdC,SAAU,GAGGL,QC5KT6C,G,MAAiB,qBAEjBC,EAAY,SAAC,GAcZ,IAbLxF,EAaI,EAbJA,QACA2C,EAYI,EAZJA,KACA1B,EAWI,EAXJA,OACAwE,EAUI,EAVJA,WACAC,EASI,EATJA,aACAC,EAQI,EARJA,kBACAxE,EAOI,EAPJA,WAOI,IANJyB,gBACEC,EAKE,EALFA,cACAC,EAIE,EAJFA,aACAC,EAGE,EAHFA,SAEFhB,EACI,EADJA,OAGM6D,EAAcpE,kBAAO,GAErBqE,EAAqB9B,uBAAY,SAAC+B,GAClCA,EAAIpF,SAAWiC,EAAKjC,OACtBkF,EAAY5D,SAAU,EAEtB4D,EAAY5D,SAAU,EAExB2D,EAAkBG,KACjB,CAACH,EAAmBhD,IAIvBb,qBAAU,WAEN8D,EAAY5D,SACT0D,EAAahF,SAAWiC,EAAKjC,QAEhCmF,EACElD,EAAKtC,KAAI,SAACW,GAAD,OAASA,EAAIC,SAGzB,CAACyE,EAAc/C,EAAM1B,EAAQ4E,IAEhC,IAAME,EAAsBC,mBAC1B,kBAAMhG,EAAQ2D,MAAK,SAACrD,GAAD,MACO,kBAAjBA,EAAOE,OACX+E,EAAeU,KAAK3F,EAAOE,MAAM0F,aAEtC,CAAClG,IAGGmG,EAAgBpC,uBAAY,WAEtB,IAAD,yDAAP,GAAO,IADTqC,cACS,SAgET,OA9DKX,EAEMW,EACI,WACX,IAAMC,EAAU1D,EAAKjC,OAAS,GAAKgF,EAAahF,SAAWiC,EAAKjC,OAEhE,OACE,yBACEP,UAAU,yCACVC,KAAK,gBAEL,2BACEkG,KAAK,WACLD,QAASA,EACTE,eAAcF,EACdG,aAAW,aACXnE,QAAS,SAACoE,GAAD,OAAQA,EAAGC,mBACpBC,SAAU,SAACF,GACTZ,EACEY,EAAGG,OAAOP,QACN1D,EAAKtC,KAAI,SAACW,GAAD,OAASA,EAAIC,MACtB,SASH,YAAgB,IAAbQ,EAAY,EAAZA,MACR4E,EAAUX,EAAarB,SAAS5C,GAEtC,OACE,yBACEtB,UAAU,0BACVC,KAAK,QAEL,2BACEkG,KAAK,WACLD,QAASA,EACTE,eAAcF,EACdG,aAAW,aACXnE,QAAS,SAACoE,GAAD,OAAQA,EAAGC,mBACpBC,SAAU,SAACF,GACTZ,EACEY,EAAGG,OAAOP,QAAV,sBAEOX,GAFP,CAGIjE,IAEAiE,EAAamB,QACb,SAACjG,GAAD,OAASA,IAAQa,WAnDpB,kBAAM,QA8DpB,CACDgE,EACAC,EACAG,EACAlD,EACA1B,IAGIhB,EAAa+F,mBACjB,kBAAMG,MACN,CAACA,IAEGW,EAAmBd,mBACvB,kBAAMG,EAAc,CAAEC,QAAQ,MAC9B,CAACD,IAGH,OACE,yBACEhG,UAAWgC,IAAW,CACpB,YAAY,EACZ,wBAAyB4D,IAE3B3F,KAAK,QAEL,kBAAC,EAAD,CACEJ,QAASA,EACTE,WAAY4G,IAEd,kBAAC,EAAD,CACE9G,QAASA,EACT2C,KAAMA,EACN1B,OAAQA,EACRf,WAAYD,EACZkB,WAAYA,EACZyB,gBAAiBR,QAAQS,GAAiBC,GAAgBC,GAC1DF,cAAeA,GAAiBF,EAAKjC,OACrCoC,aAAcA,EACdC,SAAUA,EACVhB,OAAQA,MAyBhByD,EAAUF,aAAe,CACvBG,YAAY,EACZ7C,gBAAiB,GACjB3B,OAAQ,KACRc,OAAQ,IACR2D,aAAc,GACdC,kBAAmB,aACnBxE,WAAY,cAGCqE,IC3MAA,ED2MAA,EEzMTuB,G,MAAS,uCAAG,WAAOC,GAAP,SAAAC,EAAA,+EAAmBC,OAAOC,MAAP,8DAAoEH,IACtGI,MAAK,SAACC,GAAD,OAASA,EAAIC,WADH,2CAAH,uDAwFAC,EAlFH,WAAO,IAAD,EACwBvE,mBAAS,IADjC,mBACT0C,EADS,KACK8B,EADL,OAEYxE,mBAAS,IAFrB,mBAETyE,EAFS,KAEDC,EAFC,KAIVC,EAAe3B,mBACnB,iBAAO,CAAC,CACNpF,IAAK,KACLE,MAAO,MACN,CACDF,IAAK,QACLE,MAAO,SACN,CACDF,IAAK,YACLE,MAAO,aACN,CACDF,IAAK,MACLE,MAAO,OACN,CACDF,IAAK,UACLE,MAAO,WACPc,SAAS,MAEX,IAGIgG,EAAY5B,mBAChB,kBAAMyB,EAAOpH,KAAI,SAACwH,GAAD,sBACZA,EADY,CAEfC,UACE,yBAAK3H,UAAU,eACb,yBACE4H,IAAI,YACJC,IAAKH,EAAMI,aACXlG,OAAO,KACPvB,MAAM,QAIZ0H,IACE,uBACEC,KAAMN,EAAMK,IACZtB,OAAO,SACPwB,IAAI,uBAEHP,EAAMK,YAIb,CAACT,IAGGY,EAAQ,uCAAG,WAAOrB,GAAP,eAAAC,EAAA,sEACGF,EAAUC,GADb,OACTK,EADS,OAEfK,GAAU,SAACY,GAAD,4BACLA,GADK,YAELjB,OAJU,2CAAH,sDAQd,OACE,yBAAKlH,UAAU,mBACb,kBAAC,EAAD,CACEsF,YAAU,EACVC,aAAcA,EACdC,kBAAmB,SAAC4C,GAClBf,EAAgBe,IAElBvI,QAAS2H,EACThF,KAAMiF,EACNzG,WAAY,SAACqH,EAASpH,GACpBqH,QAAQC,IAAIF,EAASpH,IAEvBwB,gBAAiB,CACfE,aAAcuF,EACdtF,SA7EQ,GA8ERF,cA7EU,SCHpB8F,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8d0d5616.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableHeader = ({\n  columns,\n  selectCell: SelectCell,\n}) => (\n  <div className=\"dt-header\" role=\"rowgroup\">\n    <div className=\"dt-row dt-header-row\" role=\"row\">\n      <SelectCell />\n      {\n          columns.map((column) => {\n            const styles = {};\n\n            if (column.width) {\n              styles.width = column.width;\n            } else {\n              const flexBasis = (100 / columns.length);\n              styles.flexBasis = `${flexBasis.toFixed(2)}%`;\n            }\n\n            return (\n              <div\n                key={column.key}\n                className=\"dt-cell dt-header-cell\"\n                role=\"columnheader\"\n                style={{ ...styles }}\n              >\n                {column.label}\n              </div>\n            );\n          })\n        }\n    </div>\n  </div>\n);\n\nTableHeader.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectCell: PropTypes.elementType.isRequired,\n};\n\nexport default TableHeader;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst TableRow = ({\n  row,\n  columns,\n  rowKey,\n  selectCell: SelectCell,\n  reactWindowStyleObj,\n  onRowClick,\n  rowIndex,\n  setSizeForWindowing,\n  hasComputedSize,\n}) => {\n  const rowRef = useRef();\n\n  const rowId = row[rowKey];\n\n  const tableCells = columns.map((column) => ({\n    value: row[column.key],\n    key: `${column.key}-${rowId}`,\n    width: column.width || null,\n    numeric: column.numeric,\n    __columnMeta__: column,\n  }));\n\n  useEffect(() => {\n    if (!hasComputedSize) {\n      // set height for windowing\n      const { height } = rowRef.current.getBoundingClientRect();\n      setSizeForWindowing(rowIndex, height);\n    }\n  }, [hasComputedSize, setSizeForWindowing, rowIndex]);\n\n  return (\n    <div style={reactWindowStyleObj} role=\"none\">\n      {/*\n        Two divs: outer receives the initial 50px from VariableSizeList.\n        Inner div renders with actual height of elem, and sets height in\n        parent cache, which then is passed to the outer div.\n      */}\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events */}\n      <div\n        ref={rowRef}\n        className={classNames({\n          'dt-row': true,\n          'dt-row--clickable': Boolean(onRowClick),\n        })}\n        onClick={() => {\n          onRowClick(row, rowIndex);\n        }}\n        role=\"row\"\n        tabIndex={0}\n      >\n        <SelectCell rowId={rowId} />\n        {\n          tableCells.map((data) => {\n            const styles = {};\n\n            if (data.width) {\n              styles.width = data.width;\n            } else {\n              const flexBasis = (100 / columns.length);\n              styles.flexBasis = `${flexBasis.toFixed(2)}%`;\n            }\n\n            return (\n              <div\n                key={data.key}\n                className={classNames({\n                  'dt-cell': true,\n                  'dt-cell--numeric': data.numeric,\n                })}\n                role=\"cell\"\n                style={{ ...styles }}\n              >\n                {data.value}\n              </div>\n            );\n          })\n        }\n      </div>\n    </div>\n  );\n};\n\nTableRow.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  row: PropTypes.object.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rowKey: PropTypes.string.isRequired,\n  selectCell: PropTypes.elementType.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  reactWindowStyleObj: PropTypes.object.isRequired,\n  onRowClick: PropTypes.func.isRequired,\n  rowIndex: PropTypes.number.isRequired,\n  setSizeForWindowing: PropTypes.func.isRequired,\n  hasComputedSize: PropTypes.bool.isRequired,\n};\n\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LoadingTableRow = ({\n  reactWindowStyleObj,\n}) => (\n  <div style={reactWindowStyleObj}>\n    <div\n      className=\"dt-row dt-row--loading\"\n      role=\"row\"\n    >\n      <span className=\"dt-loading-span\" />\n      <span className=\"dt-loading-span\" />\n      <span className=\"dt-loading-span\" />\n    </div>\n  </div>\n);\n\nLoadingTableRow.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  reactWindowStyleObj: PropTypes.object.isRequired,\n};\n\nexport default LoadingTableRow;\n","import React, {\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { VariableSizeList as List } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport TableRow from './TableRow';\nimport LoadingTableRow from './LoadingTableRow';\n\nconst PAGE_STATUS = {\n  LOADING: 'LOADING',\n  LOADED: 'LOADED',\n};\n\nconst TableBody = ({\n  rows,\n  columns,\n  rowKey,\n  selectCell,\n  onRowClick,\n  infiniteLoading,\n  totalRowCount,\n  loadMoreData,\n  pageSize,\n  height,\n}) => {\n  const [sizeMap, setSizeMap] = useState({});\n\n  const listRef = useRef();\n  const pagesMap = useRef({}); // status of all pages\n  const pageLoading = useRef(true); // if any page is loading currently\n  // queue to maintain list of pages yet to load\n  const [queue, setQueue] = useState([]);\n\n  // set loaded pages status\n  useEffect(() => {\n    if (infiniteLoading) {\n      for (let i = 0; i < (rows.length / pageSize); i += 1) {\n        pagesMap.current[i + 1] = PAGE_STATUS.LOADED;\n      }\n      pageLoading.current = Object.values(pagesMap.current).some(\n        (pg) => pg === PAGE_STATUS.LOADING,\n      );\n\n      // if there are no current loading pages\n      // & queue is empty, load next page from queue\n      if (!pageLoading.current && queue.length !== 0) {\n        const pageNo = queue.slice(0, 1);\n        setQueue(queue.slice(1));\n\n        pagesMap.current[pageNo] = PAGE_STATUS.LOADING;\n        pageLoading.current = true;\n\n        loadMoreData(pageNo);\n      }\n    }\n  }, [rows, pageSize, queue, loadMoreData, infiniteLoading]);\n\n  const setSizeForWindowing = useCallback((index, size) => {\n    setSizeMap({\n      ...sizeMap,\n      [index]: size,\n    });\n    if (listRef && listRef.current) {\n      listRef.current.resetAfterIndex(index, false);\n    }\n  }, [sizeMap, setSizeMap]);\n\n  const isItemLoaded = (index) => index < rows.length;\n\n  const pushToQueue = (pageNo) => {\n    if (!pagesMap.current[pageNo]) {\n      setQueue(\n        (prevQueue) => (prevQueue.includes(pageNo)\n          ? prevQueue\n          : ([...prevQueue, pageNo])),\n      );\n    }\n  };\n\n  const loadMoreItems = (startIndex, endIndex) => {\n    const endIndexPage = Math.floor(endIndex / pageSize) + 1;\n\n    // If scrolling to random location, load all\n    // rows until that point, in order\n    for (let pNo = 1; pNo <= endIndexPage; pNo += 1) {\n      pushToQueue(pNo);\n    }\n  };\n\n  const renderVirtualizedList = ({\n    // eslint-disable-next-line react/prop-types\n    ref,\n    // eslint-disable-next-line react/prop-types\n    onItemsRendered,\n  } = {}) => {\n    const infiniteLoadingProps = {};\n    if (infiniteLoading) {\n      infiniteLoadingProps.onItemsRendered = onItemsRendered;\n    }\n\n    return (\n      <List\n        ref={ref}\n        height={height}\n        itemCount={totalRowCount}\n        itemSize={(idx) => sizeMap[idx] || 50}\n        width=\"100%\"\n        overscanCount={2}\n        // eslint-disable-next-line react/jsx-props-no-spreading\n        {...infiniteLoadingProps}\n      >\n        {({ index, style }) => {\n          // if row is not loaded yet, render placeholder\n          if (index >= rows.length) {\n            return (\n              <LoadingTableRow\n                reactWindowStyleObj={style}\n              />\n            );\n          }\n\n          const row = rows[index];\n          return (\n            <TableRow\n              row={row}\n              columns={columns}\n              rowKey={rowKey}\n              selectCell={selectCell}\n              onRowClick={onRowClick}\n              rowIndex={index}\n              reactWindowStyleObj={style}\n              setSizeForWindowing={setSizeForWindowing}\n              hasComputedSize={Boolean(sizeMap[index])}\n            />\n          );\n        }}\n      </List>\n    );\n  };\n\n  if (!infiniteLoading) {\n    return renderVirtualizedList({\n      ref: listRef,\n    });\n  }\n\n  return (\n    <InfiniteLoader\n      isItemLoaded={isItemLoaded}\n      itemCount={totalRowCount}\n      loadMoreItems={loadMoreItems}\n    >\n      {({ onItemsRendered, ref }) => renderVirtualizedList({\n        ref: (el) => {\n          listRef.current = el;\n          ref(el);\n        },\n        onItemsRendered,\n      })}\n    </InfiniteLoader>\n  );\n};\n\nTableBody.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rowKey: PropTypes.string.isRequired,\n  selectCell: PropTypes.elementType.isRequired,\n  onRowClick: PropTypes.func.isRequired,\n  infiniteLoading: PropTypes.bool.isRequired,\n  totalRowCount: PropTypes.number.isRequired,\n  loadMoreData: PropTypes.func,\n  pageSize: PropTypes.number,\n  height: PropTypes.number.isRequired,\n};\n\nTableBody.defaultProps = {\n  loadMoreData: () => {},\n  pageSize: 1, // to prevent possible divide by zero issue\n};\n\nexport default TableBody;\n","import React, {\n  useMemo,\n  useCallback,\n  useRef,\n  useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport TableHeader from './TableHeader';\nimport TableBody from './TableBody';\n\nimport './styles.scss';\n\nconst WIDTH_PX_REGEX = /^[1-9]{1}(\\d)*px$/;\n\nconst DataTable = ({\n  columns,\n  rows,\n  rowKey,\n  selectable,\n  selectedKeys,\n  onSelectionChange,\n  onRowClick,\n  infiniteLoading: {\n    totalRowCount,\n    loadMoreData,\n    pageSize,\n  },\n  height,\n}) => {\n  // maintain if all rows are selected\n  const allSelected = useRef(false);\n  // eslint-disable-next-line no-underscore-dangle\n  const _onSelectionChange = useCallback((sel) => {\n    if (sel.length === rows.length) {\n      allSelected.current = true;\n    } else {\n      allSelected.current = false;\n    }\n    onSelectionChange(sel);\n  }, [onSelectionChange, rows]);\n\n  // on adding rows, make them selected by default\n  // if allSelected is true\n  useEffect(() => {\n    if (\n      allSelected.current\n      && selectedKeys.length !== rows.length\n    ) {\n      _onSelectionChange(\n        rows.map((row) => row[rowKey]),\n      );\n    }\n  }, [selectedKeys, rows, rowKey, _onSelectionChange]);\n\n  const hasPixelWidthValues = useMemo(\n    () => columns.some((column) => (\n      typeof column.width === 'string'\n      && WIDTH_PX_REGEX.test(column.width.trim())\n    )),\n    [columns],\n  );\n\n  const getSelectCell = useCallback(({\n    header = false,\n  } = {}) => {\n    let SelectCell;\n    if (!selectable) {\n      SelectCell = () => null;\n    } else if (header) {\n      SelectCell = () => {\n        const checked = rows.length > 0 && selectedKeys.length === rows.length;\n\n        return (\n          <div\n            className=\"dt-cell dt-header-cell dt-cell--select\"\n            role=\"columnheader\"\n          >\n            <input\n              type=\"checkbox\"\n              checked={checked}\n              aria-checked={checked}\n              aria-label=\"Select All\"\n              onClick={(ev) => ev.stopPropagation()}\n              onChange={(ev) => {\n                _onSelectionChange(\n                  ev.target.checked\n                    ? rows.map((row) => row[rowKey])\n                    : [],\n                );\n              }}\n            />\n          </div>\n        );\n      };\n    } else {\n      // eslint-disable-next-line react/prop-types\n      SelectCell = ({ rowId }) => {\n        const checked = selectedKeys.includes(rowId);\n\n        return (\n          <div\n            className=\"dt-cell dt-cell--select\"\n            role=\"cell\"\n          >\n            <input\n              type=\"checkbox\"\n              checked={checked}\n              aria-checked={checked}\n              aria-label=\"Select Row\"\n              onClick={(ev) => ev.stopPropagation()}\n              onChange={(ev) => {\n                _onSelectionChange(\n                  ev.target.checked\n                    ? ([\n                      ...selectedKeys,\n                      rowId,\n                    ])\n                    : selectedKeys.filter(\n                      (key) => key !== rowId,\n                    ),\n                );\n              }}\n            />\n          </div>\n        );\n      };\n    }\n\n    return SelectCell;\n  }, [\n    selectable,\n    selectedKeys,\n    _onSelectionChange,\n    rows,\n    rowKey,\n  ]);\n\n  const SelectCell = useMemo(\n    () => getSelectCell(),\n    [getSelectCell],\n  );\n  const HeaderSelectCell = useMemo(\n    () => getSelectCell({ header: true }),\n    [getSelectCell],\n  );\n\n  return (\n    <div\n      className={classNames({\n        'dt-table': true,\n        'dt-table--full-width': !hasPixelWidthValues,\n      })}\n      role=\"grid\"\n    >\n      <TableHeader\n        columns={columns}\n        selectCell={HeaderSelectCell}\n      />\n      <TableBody\n        columns={columns}\n        rows={rows}\n        rowKey={rowKey}\n        selectCell={SelectCell}\n        onRowClick={onRowClick}\n        infiniteLoading={Boolean(totalRowCount && loadMoreData && pageSize)}\n        totalRowCount={totalRowCount || rows.length}\n        loadMoreData={loadMoreData}\n        pageSize={pageSize}\n        height={height}\n      />\n    </div>\n  );\n};\n\nDataTable.propTypes = {\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  rows: PropTypes.arrayOf(PropTypes.object).isRequired,\n  selectable: PropTypes.bool,\n  selectedKeys: PropTypes.arrayOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ])),\n  onSelectionChange: PropTypes.func,\n  onRowClick: PropTypes.func,\n  infiniteLoading: PropTypes.shape({\n    totalRowCount: PropTypes.number,\n    loadMoreData: PropTypes.func,\n    pageSize: PropTypes.number,\n  }),\n  rowKey: PropTypes.string,\n  height: PropTypes.number,\n};\n\nDataTable.defaultProps = {\n  selectable: false,\n  infiniteLoading: {},\n  rowKey: 'id',\n  height: 500,\n  selectedKeys: [],\n  onSelectionChange: () => {},\n  onRowClick: () => {},\n};\n\nexport default DataTable;\n","import DataTable from './DataTable';\n\nexport default DataTable;\n","import React, { useState, useMemo } from 'react';\nimport DataTable from './DataTable';\nimport './App.scss';\n\nconst fetchData = async (albumId) => window.fetch(`https://jsonplaceholder.typicode.com/photos?albumId=${albumId}`)\n  .then((res) => res.json());\n\nconst PAGE_SIZE = 50;\nconst TOTAL_COUNT = 5000;\n\nconst App = () => {\n  const [selectedKeys, setSelectedKeys] = useState([]);\n  const [photos, setPhotos] = useState([]);\n\n  const tableColumns = useMemo(\n    () => ([{\n      key: 'id',\n      label: 'ID',\n    }, {\n      key: 'title',\n      label: 'Title',\n    }, {\n      key: 'thumbnail',\n      label: 'Thumbnail',\n    }, {\n      key: 'url',\n      label: 'URL',\n    }, {\n      key: 'albumId',\n      label: 'Album ID',\n      numeric: true,\n    }]),\n    [],\n  );\n\n  const tableRows = useMemo(\n    () => photos.map((photo) => ({\n      ...photo,\n      thumbnail: (\n        <div className=\"img-wrapper\">\n          <img\n            alt=\"thumbnail\"\n            src={photo.thumbnailUrl}\n            height=\"80\"\n            width=\"80\"\n          />\n        </div>\n      ),\n      url: (\n        <a\n          href={photo.url}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {photo.url}\n        </a>\n      ),\n    })),\n    [photos],\n  );\n\n  const loadData = async (albumId) => {\n    const res = await fetchData(albumId);\n    setPhotos((prev) => [\n      ...prev,\n      ...res,\n    ]);\n  };\n\n  return (\n    <div className=\"table-container\">\n      <DataTable\n        selectable\n        selectedKeys={selectedKeys}\n        onSelectionChange={(selection) => {\n          setSelectedKeys(selection);\n        }}\n        columns={tableColumns}\n        rows={tableRows}\n        onRowClick={(rowData, rowIndex) => {\n          console.log(rowData, rowIndex);\n        }}\n        infiniteLoading={{\n          loadMoreData: loadData,\n          pageSize: PAGE_SIZE,\n          totalRowCount: TOTAL_COUNT,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}